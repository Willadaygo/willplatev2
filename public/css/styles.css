/*------------------------------------*    #PULLING IN CONTENTS
\*------------------------------------*/
/**
 * #TOOLS & #SETTINGS
 */
/*------------------------------------*    #FUNCTIONS
\*------------------------------------*/
/*!
 * willplate, by Will Russell
 *
 */
/*------------------------------------*   #SETTINGS-RESPONSIVE
\*------------------------------------*/
/*  #Font face mixin
--------------------------------------*/
/*  #Responsive breakpoints mixin
--------------------------------------*/
/*  #Size helper
--------------------------------------*/
/*  #placeholder helper
--------------------------------------*/
/**
 * #GENERIC
 */
/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS and IE text size adjust after device orientation change,
 *    without disabling user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/10/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent; }

/**
 * Improve readability of focused elements when they are also in an
 * active/hover state.
 */
a:active,
a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0; }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"], input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome.
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  box-sizing: content-box;
  /* 2 */ }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td,
th {
  padding: 0; }

/*------------------------------------*    #RESET
\*------------------------------------*/
/**
 * As well as using normalize.css, it is often advantageous to remove all
 * margins from certain elements.
 */
body,
h1, h2, h3, h4, h5, h6,
p, blockquote, pre,
dl, dd, ol, ul,
form, fieldset, legend,
figure,
table, th, td, caption,
hr {
  margin: 0;
  padding: 0; }

ul, ol {
  padding-left: 1.5rem; }

/**
 * Give a help cursor to elements that give extra info on `:hover`.
 */
abbr[title],
dfn[title] {
  cursor: help; }

/**
 * Remove underlines from potentially troublesome elements.
 */
u,
ins {
  text-decoration: none; }

/**
 * Apply faux underlines to inserted text via `border-bottom`.
 */
ins {
  border-bottom: 1px solid; }

/*------------------------------------*    #BOX-SIZING
\*------------------------------------*/
/**
 * Set the global `box-sizing` state to `border-box`.
 *
 * css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice
 * paulirish.com/2012/box-sizing-border-box-ftw
 */
html {
  box-sizing: border-box; }

*,
*:before,
*:after {
  box-sizing: inherit; }

/*------------------------------------*    #SHARED
\*------------------------------------*/
h1, h2, h3, h4, h5, h6,
ul, ol, dl,
blockquote, p, address,
hr,
table,
fieldset, figure,
pre,
.l__margin-top {
  margin-top: 1.5rem; }

/**
 * #BASE
 */
@font-face {
  font-family: FaktPro-Blond;
  font-weight: normal;
  font-style: normal;
  src: url("../fonts/FaktPro-Blond.otf") format("opentype"); }

@font-face {
  font-family: FaktPro-Medium;
  font-weight: normal;
  font-style: normal;
  src: url("../fonts/FaktPro-Medium.otf") format("opentype"); }

html {
  font-size: 1em;
  line-height: 1.5;
  background-color: white;
  color: black;
  overflow-y: scroll;
  min-height: 100%;
  -webkit-text-size-adjust: 100%;
  -ms-text-size-adjust: 100%;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  text-rendering: optimizeLegibility; }

body {
  font-family: "FaktPro-Blond", "aktiv-grotesk-std", sans-serif;
  font-weight: 400; }

/*  #Headings
--------------------------------------*/
h1, .t__alpha,
h3, .t__gamma,
h4, .t__delta,
h5, .t__epsilon,
h6, .t__zeta,
.t__giga {
  font-family: "leitura-news", "Helvetica", "Arial", sans-serif;
  font-weight: 400; }

h1, .t__alpha {
  font-size: 2.5rem;
  letter-spacing: 0.01em;
  line-height: 3.4375rem; }
  @media screen and (min-width: 50em) {
    h1, .t__alpha {
      font-size: 3.75rem;
      line-height: 4.875rem; } }

h2, .t__beta {
  font-size: 1.875rem;
  line-height: 2.625rem;
  letter-spacing: 0.02em;
  color: #0014B4; }
  @media screen and (min-width: 50em) {
    h2, .t__beta {
      font-size: 2.5rem;
      line-height: 3.375rem; } }
  @media screen and (min-width: 80em) {
    h2, .t__beta {
      font-size: 3rem;
      line-height: 3.75rem; } }

h3, .t__gamma {
  font-size: 1.625rem;
  line-height: 2.375rem;
  letter-spacing: 0.01em; }
  @media screen and (min-width: 80em) {
    h3, .t__gamma {
      font-size: 1.875rem;
      line-height: 2.625rem; } }

.t__giga {
  font-size: 3.75rem;
  line-height: 4.875rem; }

strong, b, em, dt {
  font-family: "FaktPro-Medium", "aktiv-grotesk-std", sans-serif;
  font-weight: normal; }

/*------------------------------------*    #LINKS
\*------------------------------------*/
a {
  color: black; }
  a:hover,
  a:active,
  a:focus {
    color: #0014B4;
    text-decoration: none; }

.underline {
  color: inherit;
  /**
  * Layers multple text-shadows on top of 
  * each other steching outwards horizontally.
  **/
  text-shadow: 0 -0.03125em white, 0 0.03125em white, 0.03125em 0 white, -0.03125em 0 white, 0.0625em 0 white, -0.0625em 0 white, 0.09375em 0 white, -0.09375em 0 white, 0.125em 0 white, -0.125em 0 white;
  background-color: transparent;
  background-image: -webkit-linear-gradient(black, black), -webkit-linear-gradient(black, black), -webkit-linear-gradient(black, black);
  background-image: linear-gradient(black, black), linear-gradient(black, black), linear-gradient(black, black);
  /**
  * Use ems instead of pixel if you want 
  * the underline height to be responsive 
  * to font-size.
  **/
  background-size: 0.05em 0.05em, 0.05em 0.05em, 0.05em 0.05em;
  background-repeat: no-repeat, no-repeat, repeat-x;
  background-position: 0% 90%, 100% 90%, 0% 90%; }
  .lt-ie9 .underline {
    background-image: none;
    text-decoration: underline; }

.link-secret {
  color: inherit; }
  .link-secret,
  .link-secret:hover,
  .link-secret:active,
  .link-secret:focus {
    color: black;
    text-decoration: none; }

::-moz-selection {
  text-shadow: none;
  background: #0014B4;
  color: #fff; }

::selection {
  text-shadow: none;
  background: #0014B4;
  color: #fff; }

/*------------------------------------*    #GRID
\*------------------------------------*/
.grid {
  list-style: none;
  margin: 1.5rem 0 0 -1.5rem;
  padding: 0;
  text-align: left;
  font-size: 0; }
  @media screen and (min-width: 30em) {
    .grid {
      margin-top: 0; }
      .grid:first-child [class*="col--"] {
        margin-top: 0; }
      .grid.grid--noMargins {
        margin: 1.5rem 0 0 0; } }

[class*="col--"] {
  display: inline-block;
  margin-top: 1.5rem;
  padding-left: 1.5rem;
  vertical-align: top;
  width: 100%;
  font-size: medium;
  font-size: initial;
  text-align: left; }
  [class*="col--"] img {
    width: 100%; }
  .grid--noMargins > [class*="col--"] {
    margin-top: 0; }
  @media screen and (min-width: 30em) {
    .grid--noMargins > [class*="col--"] {
      margin-top: 0;
      padding-left: 0; } }

@media screen and (min-width: 30em) {
  .col--1 {
    width: 8.33333%; } }

@media screen and (min-width: 30em) {
  .col--2 {
    width: 16.66667%; } }

@media screen and (min-width: 30em) {
  .col--3 {
    width: 25%; } }

@media screen and (min-width: 30em) {
  .col--4 {
    width: 33.33333%; } }

@media screen and (min-width: 30em) {
  .col--5 {
    width: 41.66667%; } }

@media screen and (min-width: 30em) {
  .col--6 {
    width: 50%; } }

@media screen and (min-width: 30em) {
  .col--7 {
    width: 58.33333%; } }

@media screen and (min-width: 30em) {
  .col--8 {
    width: 66.66667%; } }

@media screen and (min-width: 30em) {
  .col--9 {
    width: 75%; } }

@media screen and (min-width: 30em) {
  .col--10 {
    width: 83.33333%; } }

@media screen and (min-width: 30em) {
  .col--11 {
    width: 91.66667%; } }

@media screen and (min-width: 30em) {
  .col--12 {
    width: 100%; } }

.grid-columns {
  width: 100%;
  margin-top: 1.875rem; }

.columns {
  display: block;
  position: relative;
  float: left;
  overflow: hidden;
  min-height: 1.5rem;
  background: white;
  width: 100%; }
  @media screen and (min-width: 30em) {
    .columns {
      width: 50%; } }
  @media screen and (min-width: 50em) {
    .columns {
      width: 33.333333%; } }
  @media screen and (min-width: 80em) {
    .columns {
      width: 25%; } }

.grid--full {
  margin-left: 0; }
  .grid--full > [class*="col--"] {
    padding-left: 0; }

.grid--rev {
  direction: rtl;
  text-align: left; }
  .grid--rev > [class*="col--"] {
    direction: ltr;
    text-align: left; }

.grid--middle > [class*="col--"] {
  vertical-align: middle; }

.grid--bottom > [class*="col--"] {
  vertical-align: bottom; }

.grid--right {
  text-align: right; }
  .grid--right > [class*="col--"] {
    text-align: left; }

.grid--center {
  text-align: center; }
  .grid--center > [class*="col--"] {
    text-align: left; }

/**
 * #OBJECTS
 */
.wrapper {
  max-width: 80em;
  margin: 0 auto;
  padding-right: 1.25rem;
  padding-left: 1.25rem; }
  @media screen and (min-width: 50em) {
    .wrapper {
      padding-right: 2.5rem;
      padding-left: 2.5rem; } }

/**
 * #COMPONENTS
 */
/**
 * #THEMES
 */
.styleguide hr {
  border: 0.0625rem solid black; }

.palette {
  margin: 1.875rem 0 0;
  padding: 0; }

.palette__item {
  display: inline-block;
  margin: 0 2%; }

.palette__circle {
  display: block;
  width: 9.375rem;
  height: 9.375rem;
  border-radius: 50%; }
  .palette__circle--border {
    border: 0.0625rem solid #b2b2b2; }

.palette__title {
  display: block; }

/**
 * #TRUMPS
 */
.l__blue {
  background-color: #0014B4 !important; }

.l__blue--hover:hover {
  background-color: #0014B4 !important; }

.t__blue {
  color: #0014B4 !important; }

.t__blue--hover:hover {
  color: #0014B4 !important; }

.f__blue svg {
  fill: #0014B4 !important; }

.f__blue--hover:hover svg {
  fill: #0014B4 !important; }

.l__white {
  background-color: white !important; }

.l__white--hover:hover {
  background-color: white !important; }

.t__white {
  color: white !important; }

.t__white--hover:hover {
  color: white !important; }

.f__white svg {
  fill: white !important; }

.f__white--hover:hover svg {
  fill: white !important; }

.l__grey {
  background-color: #b2b2b2 !important; }

.l__grey--hover:hover {
  background-color: #b2b2b2 !important; }

.t__grey {
  color: #b2b2b2 !important; }

.t__grey--hover:hover {
  color: #b2b2b2 !important; }

.f__grey svg {
  fill: #b2b2b2 !important; }

.f__grey--hover:hover svg {
  fill: #b2b2b2 !important; }

.l__black {
  background-color: black !important; }

.l__black--hover:hover {
  background-color: black !important; }

.t__black {
  color: black !important; }

.t__black--hover:hover {
  color: black !important; }

.f__black svg {
  fill: black !important; }

.f__black--hover:hover svg {
  fill: black !important; }

.t__align-center {
  text-align: center; }

.l__center {
  margin-left: auto;
  margin-right: auto; }

.l__clear {
  clear: both; }

.l__cf, .grid-columns, .palette {
  *zoom: 1; }
  .l__cf:before, .grid-columns:before, .palette:before, .l__cf:after, .grid-columns:after, .palette:after {
    content: " ";
    display: table; }
  .l__cf:after, .grid-columns:after, .palette:after {
    clear: both; }

.l__padding {
  padding: 1.5rem; }

@media screen and (min-width: 30em) {
  .h__small-up {
    display: none !important; } }

@media screen and (min-width: 50em) {
  .h__med-up {
    display: none !important; } }

@media screen and (min-width: 80em) {
  .h__large-up {
    display: none; } }

@media screen and (max-width: 29.9375em) {
  .h__small-down {
    display: none !important; } }

@media screen and (max-width: 49.9375em) {
  .h__med-down {
    display: none !important; } }

@media screen and (max-width: 79.9375em) {
  .h__large-down {
    display: none; } }

/*# sourceMappingURL=data:application/json;base64, */